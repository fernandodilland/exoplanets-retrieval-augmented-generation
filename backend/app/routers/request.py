"""
AI request endpoints.
"""
import httpx
from app.config import settings
from app.database import get_db
from app.dependencies import get_current_user
from app.models import Response as ResponseModel
from app.models import User
from app.schemas import AIRequestSchema, AIResponseSchema
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

router = APIRouter(prefix="/api", tags=["AI Request"])


@router.post("/request", response_model=AIResponseSchema)
async def ai_request(
    request_data: AIRequestSchema,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """
    AI request endpoint (authenticated).
    Sends query to Cloudflare AI Search and returns response.
    
    Args:
        request_data: AI request with prompt
        current_user: Current authenticated user
        db: Database session
        
    Returns:
        AI response with question and answer
        
    Raises:
        HTTPException: If AI request fails
    """
    try:
        # Prepare Cloudflare AI Search request
        url = f"https://api.cloudflare.com/client/v4/accounts/{settings.cloudflare_account_id}/autorag/rags/{settings.ai_search_name}/ai-search"
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {settings.cloudflare_api_token}"
        }
        
        # Get the query text (from either 'question' or 'prompt' field)
        query = request_data.query_text
        
        # Prepare payload for Cloudflare AI Search API
        payload = {
            "query": query,
            "max_num_results": 10,
            "rewrite_query": False,
            "stream": False
        }
        
        # Call Cloudflare AI Search API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                url, 
                json=payload, 
                headers=headers, 
                timeout=30.0
            )
            response.raise_for_status()
            ai_result = response.json()
            
            # Extract response from the API result
            if not ai_result.get("success", False):
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail=f"Cloudflare AI Search returned unsuccessful response: {ai_result.get('errors', 'Unknown error')}"
                )
            
            # Get the generated response text
            ai_response_text = ai_result.get("result", {}).get("response", "")
            
            if not ai_response_text:
                ai_response_text = "No response was generated by the AI model. Please try rephrasing your question."
        
        # Save response to database
        new_response = ResponseModel(
            user_id=current_user.id,
            question=query,
            response=ai_response_text
        )
        
        db.add(new_response)
        await db.commit()
        await db.refresh(new_response)
        
        return AIResponseSchema(
            question=new_response.question,
            response=new_response.response,
            created_at=new_response.created_at
        )
        
    except ValueError as e:
        # Validation error from schema
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    except httpx.HTTPStatusError as e:
        # HTTP error from Cloudflare API
        error_detail = f"Cloudflare AI Search API error (HTTP {e.response.status_code})"
        
        if e.response.status_code == 401:
            error_detail = "Cloudflare AI Authentication Error: Invalid API token. Please verify CLOUDFLARE_API_TOKEN in .env file."
        elif e.response.status_code == 403:
            error_detail = "Cloudflare AI Permission Error: API token does not have access to AI Search. Please verify token permissions."
        elif e.response.status_code == 404:
            error_detail = f"Cloudflare AI Search Error: The AI Search '{settings.ai_search_name}' does not exist. Please verify AI_SEARCH_NAME in .env file."
        else:
            try:
                error_data = e.response.json()
                error_detail = f"Cloudflare AI API Error: {error_data.get('errors', [{}])[0].get('message', str(e))}"
            except:
                error_detail = f"Cloudflare AI API Error: {str(e)}"
        
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=error_detail
        )
    except httpx.TimeoutException:
        raise HTTPException(
            status_code=status.HTTP_504_GATEWAY_TIMEOUT,
            detail="Cloudflare AI Search request timed out. The service may be overloaded or slow to respond."
        )
    except httpx.ConnectError:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Cloudflare AI Connection Error: Unable to connect to Cloudflare AI Search API. Please check your internet connection."
        )
    except httpx.HTTPError as e:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Cloudflare AI Network Error: {str(e)}"
        )
    except HTTPException:
        # Re-raise HTTP exceptions
        raise
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Unexpected error processing AI request: {str(e)}"
        )
